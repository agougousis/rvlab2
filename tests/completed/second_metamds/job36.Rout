
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(vegan);
Loading required package: permute
Loading required package: lattice
This is vegan 2.4-2
> library(ecodist);

Attaching package: ‘ecodist’

The following object is masked from ‘package:vegan’:

    mantel

> # replace missing data with 0;
> # fourth root or any other transformation here, excluding first column with taxon names;
> #transpose the matrices, bcdist needs rows as samples;
> # calculate bray curtis for all;
> mat1 <- read.table("/home/rvlab/jobs2/demo@gmail.com/job36/Macrobenthos_Classes_Adundance.csv", header = TRUE, sep=",",row.names=1);
> mat1[is.na(mat1)]<-0;
> mat1_2 <- sqrt(sqrt(mat1));
> mat1_tr <- t(mat1_2);
> bc1 <-bcdist(mat1_tr);
> mat2 <- read.table("/home/rvlab/jobs2/demo@gmail.com/job36/Macrobenthos_Crustacea_Adundance.csv", header = TRUE, sep=",",row.names=1);
> mat2[is.na(mat2)]<-0;
> mat2_2 <- sqrt(sqrt(mat2));
> mat2_tr <- t(mat2_2);
> bc2 <-bcdist(mat2_tr);
> mat3 <- read.table("/home/rvlab/jobs2/demo@gmail.com/job36/Macrobenthos_Femilies_Adundance.csv", header = TRUE, sep=",",row.names=1);
> mat3[is.na(mat3)]<-0;
> mat3_2 <- sqrt(sqrt(mat3));
> mat3_tr <- t(mat3_2);
> bc3 <-bcdist(mat3_tr);
> #create an empty matrix to fill in the correlation coefficients;
> bcs <- matrix(NA, ncol=3, nrow=3);
> combs <- combn(1:3, 2);
> for (i in 1:ncol(combs) ) {
+ bc1_t <- paste("bc",combs[1,i],sep="");
+ bc2_t <- paste("bc",combs[2,i],sep="");
+ bcs[combs[1,i],combs[2,i]] <- cor(get(bc1_t), get(bc2_t), method="spearman");
+ }
> bcs <- t(bcs)
> x <- c("Macrobenthos_Classes_Adundance.csv");
> x <- append(x, "Macrobenthos_Crustacea_Adundance.csv");
> x <- append(x, "Macrobenthos_Femilies_Adundance.csv");
> colnames(bcs) <-x;
> rownames(bcs) <-x;
> #transform the matrix into a dissimlarity matrix of format "dis";
> dist1 <- as.dist(bcs, diag = FALSE, upper = FALSE);
> #dist2 <- as.dist(NA);
> dist2<- 1-dist1;
> #run the mds;
> mydata.mds<- metaMDS(dist2,  k = 2, trymax = 20,distance="euclidean");
Run 0 stress 0 
Run 1 stress 0 
... Procrustes: rmse 0.1500323  max resid 0.174719 
Run 2 stress 0 
... Procrustes: rmse 0.05215865  max resid 0.06728694 
Run 3 stress 0 
... Procrustes: rmse 0.1539735  max resid 0.2162867 
Run 4 stress 0 
... Procrustes: rmse 0.07450919  max resid 0.09399892 
Run 5 stress 0 
... Procrustes: rmse 0.1165529  max resid 0.1632107 
Run 6 stress 0 
... Procrustes: rmse 0.1209656  max resid 0.1694354 
Run 7 stress 0 
... Procrustes: rmse 0.133943  max resid 0.1669253 
Run 8 stress 0 
... Procrustes: rmse 0.04156442  max resid 0.05415695 
Run 9 stress 0 
... Procrustes: rmse 0.1810084  max resid 0.2279338 
Run 10 stress 0 
... Procrustes: rmse 0.1003873  max resid 0.1398752 
Run 11 stress 0 
... Procrustes: rmse 0.1698199  max resid 0.1933186 
Run 12 stress 0 
... Procrustes: rmse 0.1903007  max resid 0.209824 
Run 13 stress 0 
... Procrustes: rmse 0.1887622  max resid 0.2370666 
Run 14 stress 0 
... Procrustes: rmse 0.1547096  max resid 0.1789331 
Run 15 stress 0 
... Procrustes: rmse 0.1382012  max resid 0.1700351 
Run 16 stress 0 
... Procrustes: rmse 0.1261022  max resid 0.1509754 
Run 17 stress 0 
... Procrustes: rmse 0.1856611  max resid 0.2060709 
Run 18 stress 0 
... Procrustes: rmse 0.2323492  max resid 0.2405883 
Run 19 stress 0 
... Procrustes: rmse 0.03010058  max resid 0.04018441 
Run 20 stress 0 
... Procrustes: rmse 0.1507856  max resid 0.1757935 
*** No convergence -- monoMDS stopping criteria:
    20: stress < smin
Warning message:
In metaMDS(dist2, k = 2, trymax = 20, distance = "euclidean") :
  Stress is (nearly) zero - you may have insufficient data
> save(dist2, ascii=TRUE, file = "/home/rvlab/jobs2/demo@gmail.com/job36/dist_2nd_stage.csv");
> png('legend.png',height = 700,width=350)
> plot(mydata.mds, type = "n",ylab="",xlab="",yaxt="n",xaxt="n",bty="n")
Warning message:
In ordiplot(x, choices = choices, type = type, display = display,  :
  Species scores not available
> n<- length(x);
> rain <- rainbow(n, s = 1, v = 1, start = 0, end = max(1, n - 1)/n, alpha = 0.8);
> labels <- rain;
> legend("topright", legend=x, col=labels, pch = 16);
> dev.off()
null device 
          1 
> #plot the empty plot;
> png('rplot.png',height = 600,width=600)
> plot(mydata.mds, type="n");
Warning message:
In ordiplot(x, choices = choices, type = type, display = display,  :
  Species scores not available
> par(mar=c(5.1, 8.1, 4.1, 8.1), xpd=TRUE);
> #add the points for the stations, blue with red circle;
> points(mydata.mds, display = c("sites", "species"), cex = 1.8, pch=19, col=labels);
> # add the labels for the stations;
> text(mydata.mds, display = c("sites", "species"), cex = 1.0 , pos=3 );
> dev.off()
null device 
          1 
> #alternative plotting:;
> #ordipointlabel(mydata.mds, display ="spec");
> #points(mydata.mds, display = "spec", cex = 1.0, pch=20, col="red", type="t"');
> #alternative plotting - allows to drag the labels to a better position and then export the graphic as EPS;
> #orditkplot(mydata.mds) ;
> print("summary")
[1] "summary"
> mydata.mds;

Call:
metaMDS(comm = dist2, distance = "euclidean", k = 2, trymax = 20) 

global Multidimensional Scaling using monoMDS

Data:     dist2 
Distance: user supplied 

Dimensions: 2 
Stress:     0 
Stress type 1, weak ties
No convergent solutions - best solution after 20 tries
Scaling: centring, PC rotation 
Species: scores missing

> 
> proc.time()
   user  system elapsed 
  1.376   0.055   1.509 
